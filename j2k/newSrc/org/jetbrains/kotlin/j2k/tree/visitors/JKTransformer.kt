package org.jetbrains.kotlin.j2k.tree.visitors

import org.jetbrains.kotlin.j2k.tree.*

interface JKTransformer<in D> {
    fun <E: JKElement> transformElement(element: JKElement, data: D): E 
    fun <E: JKClass> transformClass(klass: JKClass, data: D): E = transformDeclaration(klass, data)
    fun <E: JKStatement> transformStatement(statement: JKStatement, data: D): E = transformElement(statement, data)
    fun <E: JKExpression> transformExpression(expression: JKExpression, data: D): E = transformStatement(expression, data)
    fun <E: JKBinaryExpression> transformBinaryExpression(binaryExpression: JKBinaryExpression, data: D): E = transformExpression(binaryExpression, data)
    fun <E: JKUnaryExpression> transformUnaryExpression(unaryExpression: JKUnaryExpression, data: D): E = transformExpression(unaryExpression, data)
    fun <E: JKPrefixExpression> transformPrefixExpression(prefixExpression: JKPrefixExpression, data: D): E = transformUnaryExpression(prefixExpression, data)
    fun <E: JKPostfixExpression> transformPostfixExpression(postfixExpression: JKPostfixExpression, data: D): E = transformUnaryExpression(postfixExpression, data)
    fun <E: JKQualifiedExpression> transformQualifiedExpression(qualifiedExpression: JKQualifiedExpression, data: D): E = transformExpression(qualifiedExpression, data)
    fun <E: JKMethodCallExpression> transformMethodCallExpression(methodCallExpression: JKMethodCallExpression, data: D): E = transformExpression(methodCallExpression, data)
    fun <E: JKFieldAccessExpression> transformFieldAccessExpression(fieldAccessExpression: JKFieldAccessExpression, data: D): E = transformExpression(fieldAccessExpression, data)
    fun <E: JKExpressionList> transformExpressionList(expressionList: JKExpressionList, data: D): E = transformElement(expressionList, data)
    fun <E: JKMethodReference> transformMethodReference(methodReference: JKMethodReference, data: D): E = transformElement(methodReference, data)
    fun <E: JKFieldReference> transformFieldReference(fieldReference: JKFieldReference, data: D): E = transformElement(fieldReference, data)
    fun <E: JKOperatorIdentifier> transformOperatorIdentifier(operatorIdentifier: JKOperatorIdentifier, data: D): E = transformIdentifier(operatorIdentifier, data)
    fun <E: JKQualificationIdentifier> transformQualificationIdentifier(qualificationIdentifier: JKQualificationIdentifier, data: D): E = transformIdentifier(qualificationIdentifier, data)
    fun <E: JKLoop> transformLoop(loop: JKLoop, data: D): E = transformStatement(loop, data)
    fun <E: JKDeclaration> transformDeclaration(declaration: JKDeclaration, data: D): E = transformElement(declaration, data)
    fun <E: JKBlock> transformBlock(block: JKBlock, data: D): E = transformElement(block, data)
    fun <E: JKIdentifier> transformIdentifier(identifier: JKIdentifier, data: D): E = transformElement(identifier, data)
    fun <E: JKTypeIdentifier> transformTypeIdentifier(typeIdentifier: JKTypeIdentifier, data: D): E = transformIdentifier(typeIdentifier, data)
    fun <E: JKNameIdentifier> transformNameIdentifier(nameIdentifier: JKNameIdentifier, data: D): E = transformIdentifier(nameIdentifier, data)
    fun <E: JKLiteralExpression> transformLiteralExpression(literalExpression: JKLiteralExpression, data: D): E = transformExpression(literalExpression, data)
    fun <E: JKModifierList> transformModifierList(modifierList: JKModifierList, data: D): E = transformElement(modifierList, data)
    fun <E: JKModifier> transformModifier(modifier: JKModifier, data: D): E = transformElement(modifier, data)
    fun <E: JKAccessModifier> transformAccessModifier(accessModifier: JKAccessModifier, data: D): E = transformModifier(accessModifier, data)
    fun <E: JKDeclaration> transformJavaField(javaField: JKJavaField, data: D): E = transformDeclaration(javaField, data)
    fun <E: JKDeclaration> transformJavaMethod(javaMethod: JKJavaMethod, data: D): E = transformDeclaration(javaMethod, data)
    fun <E: JKLoop> transformJavaForLoop(javaForLoop: JKJavaForLoop, data: D): E = transformLoop(javaForLoop, data)
    fun <E: JKExpression> transformJavaAssignmentExpression(javaAssignmentExpression: JKJavaAssignmentExpression, data: D): E = transformExpression(javaAssignmentExpression, data)
    fun <E: JKTypeIdentifier> transformJavaTypeIdentifier(javaTypeIdentifier: JKJavaTypeIdentifier, data: D): E = transformTypeIdentifier(javaTypeIdentifier, data)
    fun <E: JKLiteralExpression> transformJavaStringLiteralExpression(javaStringLiteralExpression: JKJavaStringLiteralExpression, data: D): E = transformLiteralExpression(javaStringLiteralExpression, data)
    fun <E: JKOperatorIdentifier> transformJavaOperatorIdentifier(javaOperatorIdentifier: JKJavaOperatorIdentifier, data: D): E = transformOperatorIdentifier(javaOperatorIdentifier, data)
    fun <E: JKQualificationIdentifier> transformJavaQualificationIdentifier(javaQualificationIdentifier: JKJavaQualificationIdentifier, data: D): E = transformQualificationIdentifier(javaQualificationIdentifier, data)
    fun <E: JKMethodCallExpression> transformJavaMethodCallExpression(javaMethodCallExpression: JKJavaMethodCallExpression, data: D): E = transformMethodCallExpression(javaMethodCallExpression, data)
    fun <E: JKFieldAccessExpression> transformJavaFieldAccessExpression(javaFieldAccessExpression: JKJavaFieldAccessExpression, data: D): E = transformFieldAccessExpression(javaFieldAccessExpression, data)
    fun <E: JKMethodReference> transformJavaMethodReference(javaMethodReference: JKJavaMethodReference, data: D): E = transformMethodReference(javaMethodReference, data)
    fun <E: JKFieldReference> transformJavaFieldReference(javaFieldReference: JKJavaFieldReference, data: D): E = transformFieldReference(javaFieldReference, data)
    fun <E: JKAccessModifier> transformJavaAccessModifier(javaAccessModifier: JKJavaAccessModifier, data: D): E = transformAccessModifier(javaAccessModifier, data)
    fun <E: JKDeclaration> transformKtFun(ktFun: JKKtFun, data: D): E = transformDeclaration(ktFun, data)
    fun <E: JKDeclaration> transformKtConstructor(ktConstructor: JKKtConstructor, data: D): E = transformDeclaration(ktConstructor, data)
    fun <E: JKDeclaration> transformKtPrimaryConstructor(ktPrimaryConstructor: JKKtPrimaryConstructor, data: D): E = transformKtConstructor(ktPrimaryConstructor, data)
    fun <E: JKStatement> transformKtAssignmentStatement(ktAssignmentStatement: JKKtAssignmentStatement, data: D): E = transformStatement(ktAssignmentStatement, data)
}
